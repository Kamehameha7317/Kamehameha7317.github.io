<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity[MonoBehavior]SetActive和enabled的使用与MonoBehavior的关系</title>
    <link href="/2022/09/23/Unity%5BMonoBehavior%5DSetActive%E5%92%8Cenabled%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8EMonoBehavior%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/09/23/Unity%5BMonoBehavior%5DSetActive%E5%92%8Cenabled%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8EMonoBehavior%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h1><p>当<code>GameObject</code>勾选，<code>Mesh Renderer</code>不勾选的情况下，运行游戏，可在<code>Start()</code>中从自身获取到<code>Materials</code>中元素。之前以为无法通过脚本获取<code>enabled=false</code>的组件内容，重新看了一下生命周期的相关内容，记录一下。<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923151740.png" alt="20220923151740"> </p><h1 id="MonoBehaviour的生命周期"><a href="#MonoBehaviour的生命周期" class="headerlink" title="MonoBehaviour的生命周期"></a>MonoBehaviour的生命周期</h1><p>周期图不在此复制了，网上有很多。<code>Monobehaviour</code>作为Unity的特殊组件，一个脚本继承的时候会自动调用很多方法，方法称为“事件函数”。</p><h3 id="Awake"><a href="#Awake" class="headerlink" title="Awake()"></a>Awake()</h3><ul><li>加载场景时会调用Awake</li><li>初始化使用 <code>Object.Instantiate</code> 创建的 GameObject时会调用Awake</li><li>在脚本实例的生存期内，只会调用一次，所以用于初始化，脚本的生存期持续到包含它的场景被卸载为止，如果重新加载场景，也会重新调用Awake</li><li>Unity 调用每个 GameObject 的 Awake 的顺序是不确定的,用 Awake 在脚本之间设置引用，并使用 /Start/（在所有 Awake 调用完成后调用）来回传递任何信息</li><li>对于未激活的 GameObject，调用 GameObject.SetActive (GameObject为On)可以将其激活。<h3 id="Start"><a href="#Start" class="headerlink" title="Start()"></a>Start()</h3></li><li>唤醒后执行一帧，与 Awake 不同的是，它在一帧之后执行。</li><li> 在脚本生命周期内仅调用一次</li><li> GameObject 和 MonoBehaviour 都在 ON 状态下运行（活动）<h3 id="OnEnable"><a href="#OnEnable" class="headerlink" title="OnEnable()"></a>OnEnable()</h3>与 Awake 和 Start 一样，它用于初始化。但是，与 Awake 和 Start 不同的是，它被多次调用是一个很大的功能。</li><li>在 GameObject 和 MonoBehaviour 都打开的情况下运行</li><li>唤醒后运行（Start前）</li><li>运行多次,在对象变为启用和激活状态时调用。<h3 id="OnDisable"><a href="#OnDisable" class="headerlink" title="OnDisable()"></a>OnDisable()</h3>OnEnable 的反向。关闭时调用。</li><li>当 GameObject 或 MonoBehaviour 关闭时工作</li><li>即使组件被移除也能工作<h3 id="Update"><a href="#Update" class="headerlink" title="Update()"></a>Update()</h3></li><li>运行每一帧</li><li>在 GameObject 和 MonoBehaviour 都打开的情况下运行<h3 id="OnDestory"><a href="#OnDestory" class="headerlink" title="OnDestory()"></a>OnDestory()</h3></li><li>场景或游戏结束时，发生 OnDestroy</li><li>删除 GameObject 或 MonoBehaviour执行</li><li>如果您过去没有运行 Awake，则不起作用。如果 GameObject 仍处于非活动状态，则 OnDestroy 将不起作用。<h1 id="选择SetActive-or-enabled"><a href="#选择SetActive-or-enabled" class="headerlink" title="选择SetActive or enabled"></a>选择SetActive or enabled</h1><code>Awake</code>、<code>Start</code>、<code>OnEnable</code>、<code>Update</code>执行的条件是<strong>GameObject或Component</strong>处于活动状态，活动状态如下图所示<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923164817.png" alt="20220923164817"><h3 id="GameObject-SetActive-和Component-enabled-的6种切换模式"><a href="#GameObject-SetActive-和Component-enabled-的6种切换模式" class="headerlink" title="GameObject(SetActive)和Component(enabled)的6种切换模式"></a>GameObject(SetActive)和Component(enabled)的6种切换模式</h3></li></ul><ol><li><code>GameObject</code>[SetActive(false)] <code>Component</code>[enabled=false]<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923165529.png" alt="20220923165529"></li></ol><p><strong>执行事件函数：无</strong><br>2. <code>GameObject</code>[SetActive(true)] <code>Component</code>[enabled=false]<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923165632.png" alt="20220923165632"><br><strong>执行事件函数：Awake()</strong><br>3. <code>GameObject</code>[SetActive(false)] <code>Component</code>[enabled=true]<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923165807.png" alt="20220923165807"><br><strong>执行事件函数：无</strong><br>4. <code>GameObject</code>[SetActive(true)] <code>Component</code>[enabled=true]<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923165857.png" alt="20220923165857"><br><strong>执行事件函数：Awake()、OnEnable()、Start()、Update()</strong></p><blockquote><p>除非<code>GameObject</code>被打开，否则什么都不会起作用 </p></blockquote><ol start="5"><li>先<code>GameObject</code>[SetActive(true)] <code>Component</code>[enabled=false]，再<code>GameObject</code>[SetActive(true)] <code>Component</code>[enabled=true]<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923170415.png" alt="20220923170415"></li></ol><p><strong>状态发生变化时执行事件函数：OnEnable()、Start()、Update()，未执行Awake()</strong><br>6. 保持<code>Component</code>状态不变，使<code>GameObject</code>默认开启，然后关闭再打开<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220923171436.png" alt="20220923171436"><br><strong>状态发生变化时执行事件函数：OnEnable()、Update()，未执行Awake()、Start()</strong></p><blockquote><p>Awake()、Start()每个<code>GameObject</code>只能调用一次</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Component</code>的活动状态(enable)ON / OFF影响的是特定的事件函数，如果为 OFF 仅为不自动执行这些周期事件函数，所以不会影响到取其中的字段内容。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://shibuya24.info/entry/unity-active#%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E2%91%A0GameObject:OFF|%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88:OFF">https://shibuya24.info/entry/unity-active#%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E2%91%A0GameObject:OFF|%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88:OFF</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Component</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity[Camera]RenderTexture使用</title>
    <link href="/2022/09/23/Unity%5BCamera%5DRenderTexture%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/23/Unity%5BCamera%5DRenderTexture%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Camera-activeTexture和Camera-targetTexture"><a href="#关于Camera-activeTexture和Camera-targetTexture" class="headerlink" title="关于Camera.activeTexture和Camera.targetTexture"></a>关于Camera.activeTexture和Camera.targetTexture</h1><h2 id="在Get的时候，Get到的是否为同一个RenderTexture我知道这两个的区别是一个只能获得当前所正在渲染的RenderTexture，一个是既可以获得也可以设置渲染目标，但这样activeTexture有什么必要性呢"><a href="#在Get的时候，Get到的是否为同一个RenderTexture我知道这两个的区别是一个只能获得当前所正在渲染的RenderTexture，一个是既可以获得也可以设置渲染目标，但这样activeTexture有什么必要性呢" class="headerlink" title="在Get的时候，Get到的是否为同一个RenderTexture我知道这两个的区别是一个只能获得当前所正在渲染的RenderTexture，一个是既可以获得也可以设置渲染目标，但这样activeTexture有什么必要性呢"></a>在Get的时候，Get到的是否为同一个RenderTexture我知道这两个的区别是一个只能获得当前所正在渲染的RenderTexture，一个是既可以获得也可以设置渲染目标，但这样activeTexture有什么必要性呢</h2><ul><li>Camera.targetTexture必须在相机指定Render Target才会非null，Camera.activeTexture获取到的值和调用的时机有关系。官方文档中写着可以在OnPostRender中获取到，比如使用了后处理，在OnPostRender中可以获取到后处理申请的RenderTexture，在Update中获取就是null。如果给相机设置了RenderTexture，那么targetTexture就是设置的RenderTexture。如果没有开启HDR，在OnPostRender中activeTexture获取到的也是这个RenderTexture。如果开启了HDR，则是一个另外申请的RenderTexture。</li><li>推荐使用RenderDoc查看渲染状态，分为两种情况，在安卓平台上开启了Always Blit和没开启会不一样。开启了Always Blit，会在最后多一个Present的过程，在Present之前，会将所有的渲染渲染到一个叫tex的RenderTexture上（这里不考虑后处理以及HDR导致生成了额外的RenderTexture），在Present的时候将tex Copy到Backbuffer里面。如果没有开启AlwaysBlit，比如Blit Type是Never，那么所有的渲染都是直接渲染到Backbuffer的（这里同样不考虑RenderTexture的情况），Blit Type为Auto的时候没有遇到出现Present的情况，在线性空间也没出现Present 。Backbuffer和那个用来Present的tex这两个对象都可以理解为系统提供的，从C#脚本中是没法获取到的，而且从Profiler里面也是看不到这两个对象的大小的。</li><li>总结起来就是：大部分情况下Camera.targetTexture都是为null的，除非相机设置了RenderTarget。</li></ul><p>对于Camera.activeTexture，这个需要看调用时机，在OnPostRender中调用，如果有使用后处理或者HDR，则可以获取到申请到的RenderTexture，在Update里面获取是null的，其他的函数阶段没有详细测试过。</p><p>对于Backbuffer，这个系统是提供的，C#脚本是获取不到的。而且不一定是直接绘制到Backbuffer，就算没有使用后处理或者HDR，如果开启了Always Blit，也是会多一个中间层，在最后阶段中间层会Copy到Backbuffer。<br>————————————————<br>版权声明：本文为CSDN博主「UWA」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/UWA4D/article/details/109771440">https://blog.csdn.net/UWA4D/article/details/109771440</a></p><h1 id="关于RenderTexture释放问题的记录"><a href="#关于RenderTexture释放问题的记录" class="headerlink" title="关于RenderTexture释放问题的记录"></a>关于RenderTexture释放问题的记录</h1><ul><li>rt.Release()可以释放对应的显存内容(GfxDevice),但是不会删除这个UnityEngineObject本身,在Profiler里看的大小并没有考虑是否释放显存</li><li>先Release()再Destroy完全是多余的<br><a href="https://zhuanlan.zhihu.com/p/41251356">https://zhuanlan.zhihu.com/p/41251356</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Component</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity[UGUI]EventSystem.current.currentSelectedGameObject==NULL</title>
    <link href="/2022/08/10/Unity%5BUGUI%5DEventSystem.current.currentSelectedGameObject==NULL/"/>
    <url>/2022/08/10/Unity%5BUGUI%5DEventSystem.current.currentSelectedGameObject==NULL/</url>
    
    <content type="html"><![CDATA[<h1 id="EventSystem-current-currentSelectedGameObject"><a href="#EventSystem-current-currentSelectedGameObject" class="headerlink" title="EventSystem.current.currentSelectedGameObject"></a>EventSystem.current.currentSelectedGameObject</h1><p><em>The GameObject currently considered active by the EventSystem.</em></p><ul><li>EventSystem 当前认为处于活动状态的游戏对象<h1 id="报空场景"><a href="#报空场景" class="headerlink" title="报空场景"></a>报空场景</h1></li><li>获取鼠标点击Toggle时报空，原因是Toggle的Navigation设置为了None，换成Automatic后正常，<h1 id="UnityUI的Navigation"><a href="#UnityUI的Navigation" class="headerlink" title="UnityUI的Navigation"></a>UnityUI的Navigation</h1>设置为None后不再接收鼠标点击的焦点。<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220810151253.png" alt="20220810151253"><br>可手动设置Selected状态在保持None的状态下，得到currentSelectedGameObject<ol><li>设置EventSystem的firstSelected<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/20220810151725.png" alt="20220810151725"> </li><li>通过代码<code>EventSystem.current.SetSelectedGameObject()</code>直接设置SetSelected。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Component</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity[Tips]利用属性切换物体显示隐藏</title>
    <link href="/2022/07/28/Unity%5BTips%5D%E5%88%A9%E7%94%A8%E5%B1%9E%E6%80%A7%E5%88%87%E6%8D%A2%E7%89%A9%E4%BD%93%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F/"/>
    <url>/2022/07/28/Unity%5BTips%5D%E5%88%A9%E7%94%A8%E5%B1%9E%E6%80%A7%E5%88%87%E6%8D%A2%E7%89%A9%E4%BD%93%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="C-中的属性"><a href="#C-中的属性" class="headerlink" title="C#中的属性"></a>C#中的属性</h1><ul><li>访问属性时，其行为类似于字段。 但与字段不同的是，属性通过访问器实现；<strong>访问器用于定义访问属性或为属性赋值时执行的语句。</strong><h1 id="属性语法"><a href="#属性语法" class="headerlink" title="属性语法"></a>属性语法</h1></li><li>属性语法是字段的自然延伸。 字段定义存储位置，</li><li>属性定义包含<code>get</code> 和 <code>set</code> 访问器的声明，这两个访问器用于检索该属性的值以及对其赋值。<figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> FirstName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h1></li><li>点击按钮，显示对应的形状，其他形状隐藏<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/2022-07-28-11-29-59.png" alt="2022-07-28-11-29-59"><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1></li><li>控制脚本<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIObjectView</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//存储所有形状</span><br>    <span class="hljs-keyword">public</span> GameObject[] objects;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> currentObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CurrentObject<br>    &#123;<br>        <span class="hljs-keyword">get</span> =&gt; currentObject;<br>        <span class="hljs-keyword">set</span><br>        &#123;<br>            currentObject = <span class="hljs-keyword">value</span>; <br>            UpdateObject();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateObject</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.Length; i++)<br>        &#123;<br>            objects[i].SetActive(i==currentObject);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>调用脚本,当调用<code>CurrentObject</code>赋值时执行<code>UIObjectView</code>中<code>CurrentObject</code>的<code>Set</code>方法，实现更新物体显示隐藏。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> UIObjectView uiObjectView;<br>    <span class="hljs-comment">//按钮点击事件，根据按钮名称添加index（1、2、3、4）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnSelectObjectClick</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        uiObjectView.CurrentObject = index - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity[Camera]改变正交模式的Size控制RenderTexture画面显示范围</title>
    <link href="/2022/07/27/Unity%5BCamera%5D%E6%94%B9%E5%8F%98%E6%AD%A3%E4%BA%A4%E6%A8%A1%E5%BC%8F%E7%9A%84Size%E6%8E%A7%E5%88%B6RenderTexture%E7%94%BB%E9%9D%A2%E6%98%BE%E7%A4%BA%E8%8C%83%E5%9B%B4/"/>
    <url>/2022/07/27/Unity%5BCamera%5D%E6%94%B9%E5%8F%98%E6%AD%A3%E4%BA%A4%E6%A8%A1%E5%BC%8F%E7%9A%84Size%E6%8E%A7%E5%88%B6RenderTexture%E7%94%BB%E9%9D%A2%E6%98%BE%E7%A4%BA%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="Size的定义"><a href="#Size的定义" class="headerlink" title="Size的定义"></a>Size的定义</h1><ul><li>Unity文档：The viewport size of the Camera when set to Orthographic.当选择正交模式的视窗大小。<br>所谓Size是当前正交摄像机屏幕高度的一半的值，值按照unity单位长度来计算。        </li><li>下图所示Cube的scale是(5,5,5),正交相机的Size是5，RenderTexture的Size是(1920*1080)，两个高度为5unity单位的Cube正好占满整个屏幕。<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/1.png" alt="1"><h1 id="Size的使用"><a href="#Size的使用" class="headerlink" title="Size的使用"></a>Size的使用</h1></li><li>使用场景：使用正交摄像机(Orthographic)在RenderTexture上渲染Cube，Cube宽度不固定，保持Cube宽度正好在渲染画面不出边界。<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/2022-07-27-10-51-18.png" alt="2022-07-27-10-51-18"></li><li>假设当前Cube宽度为60，将Cube在Z方向旋转90度，计算出填充满屏幕正交摄像机的Size需要为30<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/2022-07-27-11-02-56.png" alt="2022-07-27-11-02-56"><br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/2022-07-27-11-02-30.png" alt="2022-07-27-11-02-30"></li><li>该正交摄像机对应的RenderTextureSize为(1920*1080)，由于更改正交摄像机的Size仅影响屏幕高度，我们可以通过计算长宽比(1080/1920=0.56)得到屏幕长宽对应关系,将正交摄像机的Size值 *0.56即可得到满足宽度需求的结果。<br><img src="https://raw.githubusercontent.com/Kamehameha7317/Img_storage/main/blog/pic/2022-07-27-11-12-19.png" alt="2022-07-27-11-12-19"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Component</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
